{
	"info": {
		"_postman_id": "923b3706-7eb6-4471-8c5f-61e79d666d22",
		"name": "newtech-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28131810"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"123456a@\",\r\n    \"full_name\": \"ADMIN\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-domain}}/auth/register",
							"host": [
								"{{host-domain}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"res = pm.response.json();\r",
									"if (res.data) {\r",
									"    postman.setEnvironmentVariable(\"token\", res.data.token);\r",
									"}",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('status', 'error', 'data', 'code', 'message');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"RefreshToken is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.refreshToken).to.be.a('string').and.to.have.length.above(0, \"RefreshToken should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate user object\", function () {",
									"    const responseData = pm.response.json();",
									"    const user = responseData.data.user;",
									"    ",
									"    pm.expect(user).to.be.an('object');",
									"    pm.expect(user.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"id should not be empty\");",
									"    pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"username should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"123456a@\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-domain}}/auth/login",
							"host": [
								"{{host-domain}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-domain}}/auth/logout",
							"host": [
								"{{host-domain}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "get profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host-domain}}/user/user-profile",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"user",
										"user-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "update profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"full_name\": \"ADMIN\",\r\n    \"username\": \"admin\",\r\n    \"email\": \"real@gmail.com\",\r\n    \"role\": \"user\",\r\n    \"birthday\": \"2023-11-21T10:46:10.442Z\",\r\n    \"gender\": \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/user/update-profile",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"user",
										"update-profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "get users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host-domain}}/user/users",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"user",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "get user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host-domain}}/admin/user/:id",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"admin",
										"user",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "4a4076c9-8444-4978-975c-77dbd0d99fc0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "toggle active",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{host-domain}}/admin/user/active/:id",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"admin",
										"user",
										"active",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "research",
			"item": [
				{
					"name": "activities",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "create research activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.username).to.exist;",
													"    pm.expect(responseData.createdAt).to.exist;",
													"    pm.expect(responseData.updatedAt).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.full_name).to.be.null;",
													"    pm.expect(responseData.phone).to.be.null;",
													"    pm.expect(responseData.gender).to.be.null;",
													"    pm.expect(responseData.verification_code).to.be.null;",
													"});",
													"",
													"",
													"pm.test(\"The id field is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"main activity\",\r\n  \"total_hours\": 100,\r\n  \"academic_year\": \"2023 - 2024\",\r\n  \"lead_unit\": \"Sở Khoa học Công nghệ\",\r\n  \"level\": \"Tỉnh\",\r\n  \"research_type\": \"Đề tài, dự án nghiên cứu khoa học các cấp\",\r\n  \"unit\": \"đề tài\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/activities",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"activities"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get research activity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/research/activities/:id",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"activities",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "2d36b8c5-7514-41e5-a482-ad0311cc267f"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get research activities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/research/activities",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"activities"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "types",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "get types",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host-domain}}/admin/research/types",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"types"
											]
										}
									},
									"response": []
								},
								{
									"name": "create type",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Test_1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/type",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"type"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "topics",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "get topics",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host-domain}}/admin/research/topics",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topics"
											]
										}
									},
									"response": []
								},
								{
									"name": "get topic",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"\",\r\n    \"activityId\": \"\",\r\n    \"categoryId\": \"\",\r\n    \"approved_budget\": 0,\r\n    \"approved_hours\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic/:id",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "b2176d6e-751f-411f-870c-0f8597bd386b"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create topic",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"de tai main activity\",\r\n    \"activityId\": \"09743399-b536-41f1-9c82-b6c21fefaafb\",\r\n    \"approved_budget\": 100000,\r\n    \"approved_hours\": 100\r\n    // \"categoryId\": \"\",\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get topic",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"\",\r\n    \"activityId\": \"\",\r\n    \"categoryId\": \"\",\r\n    \"approved_budget\": 0,\r\n    \"approved_hours\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/research/topic/:id",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"topic",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "b2176d6e-751f-411f-870c-0f8597bd386b"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "academic year",
					"item": [
						{
							"name": "admin",
							"item": []
						}
					]
				},
				{
					"name": "registrations",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "get topic registrations",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"\",\r\n    \"activityId\": \"\",\r\n    \"categoryId\": \"\",\r\n    \"approved_budget\": 0,\r\n    \"approved_hours\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration/filter/all",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration",
												"filter",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "get topic registration",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration/filter/:id",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration",
												"filter",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "6c1379f3-b537-4cca-b258-2a30e2802178"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "update topic registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.username).to.exist;",
													"    pm.expect(responseData.createdAt).to.exist;",
													"    pm.expect(responseData.updatedAt).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.full_name).to.be.null;",
													"    pm.expect(responseData.phone).to.be.null;",
													"    pm.expect(responseData.gender).to.be.null;",
													"    pm.expect(responseData.verification_code).to.be.null;",
													"});",
													"",
													"",
													"pm.test(\"The id field is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"6c1379f3-b537-4cca-b258-2a30e2802178\",\r\n    \"approval_status\": \"approved\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration"
											]
										}
									},
									"response": []
								},
								{
									"name": "approve topic registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.username).to.exist;",
													"    pm.expect(responseData.createdAt).to.exist;",
													"    pm.expect(responseData.updatedAt).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.full_name).to.be.null;",
													"    pm.expect(responseData.phone).to.be.null;",
													"    pm.expect(responseData.gender).to.be.null;",
													"    pm.expect(responseData.verification_code).to.be.null;",
													"});",
													"",
													"",
													"pm.test(\"The id field is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"6c1379f3-b537-4cca-b258-2a30e2802178\",\r\n    \"approval_status\": \"approved\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration/review/approve?id=6c1379f3-b537-4cca-b258-2a30e2802178",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration",
												"review",
												"approve"
											],
											"query": [
												{
													"key": "id",
													"value": "6c1379f3-b537-4cca-b258-2a30e2802178"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "reject topic registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.username).to.exist;",
													"    pm.expect(responseData.createdAt).to.exist;",
													"    pm.expect(responseData.updatedAt).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.full_name).to.be.null;",
													"    pm.expect(responseData.phone).to.be.null;",
													"    pm.expect(responseData.gender).to.be.null;",
													"    pm.expect(responseData.verification_code).to.be.null;",
													"});",
													"",
													"",
													"pm.test(\"The id field is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"6c1379f3-b537-4cca-b258-2a30e2802178\",\r\n    \"approval_status\": \"approved\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration/review/reject?id=6c1379f3-b537-4cca-b258-2a30e2802178",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration",
												"review",
												"reject"
											],
											"query": [
												{
													"key": "id",
													"value": "6c1379f3-b537-4cca-b258-2a30e2802178"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create topic registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topicId\": \"b2176d6e-751f-411f-870c-0f8597bd386b\",\r\n    \"author_position\": \"\",\r\n    \"expected_budget\": 100000,\r\n    \"expected_hours\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/research/topic/registration",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"topic",
										"registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "update topic registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topicId\": \"\",\r\n    \"author_position\": \"\",\r\n    \"expected_budget\": 0,\r\n    \"expected_hours\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/research/topic-registration",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"topic-registration"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete topic registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"topicId\": \"\",\r\n    \"author_position\": \"\",\r\n    \"expected_budget\": 0,\r\n    \"expected_hours\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-domain}}/research/topic-registration",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"topic-registration"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "submissions",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "approve topic submission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.username).to.exist;",
													"    pm.expect(responseData.createdAt).to.exist;",
													"    pm.expect(responseData.updatedAt).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.full_name).to.be.null;",
													"    pm.expect(responseData.phone).to.be.null;",
													"    pm.expect(responseData.gender).to.be.null;",
													"    pm.expect(responseData.verification_code).to.be.null;",
													"});",
													"",
													"",
													"pm.test(\"The id field is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"6c1379f3-b537-4cca-b258-2a30e2802178\",\r\n    \"approval_status\": \"approved\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration/review/approve?id=6c1379f3-b537-4cca-b258-2a30e2802178",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration",
												"review",
												"approve"
											],
											"query": [
												{
													"key": "id",
													"value": "6c1379f3-b537-4cca-b258-2a30e2802178"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "reject topic submission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.username).to.exist;",
													"    pm.expect(responseData.createdAt).to.exist;",
													"    pm.expect(responseData.updatedAt).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.full_name).to.be.null;",
													"    pm.expect(responseData.phone).to.be.null;",
													"    pm.expect(responseData.gender).to.be.null;",
													"    pm.expect(responseData.verification_code).to.be.null;",
													"});",
													"",
													"",
													"pm.test(\"The id field is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"6c1379f3-b537-4cca-b258-2a30e2802178\",\r\n    \"approval_status\": \"approved\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host-domain}}/admin/research/topic-registration/review/reject?id=6c1379f3-b537-4cca-b258-2a30e2802178",
											"host": [
												"{{host-domain}}"
											],
											"path": [
												"admin",
												"research",
												"topic-registration",
												"review",
												"reject"
											],
											"query": [
												{
													"key": "id",
													"value": "6c1379f3-b537-4cca-b258-2a30e2802178"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get topic submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/nem/Desktop/submission.png"
										}
									]
								},
								"url": {
									"raw": "{{host-domain}}/research/topic-submission",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"topic-submission"
									]
								}
							},
							"response": []
						},
						{
							"name": "create topic submission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.username).to.exist;",
											"    pm.expect(responseData.createdAt).to.exist;",
											"    pm.expect(responseData.updatedAt).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'full_name', 'phone', 'gender', and 'verification_code' fields are nullable\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.full_name).to.be.null;",
											"    pm.expect(responseData.phone).to.be.null;",
											"    pm.expect(responseData.gender).to.be.null;",
											"    pm.expect(responseData.verification_code).to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"The id field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'createdAt' field is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Invalid date format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/nem/Desktop/submission.png"
										}
									]
								},
								"url": {
									"raw": "{{host-domain}}/research/topic-submission",
									"host": [
										"{{host-domain}}"
									],
									"path": [
										"research",
										"topic-submission"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "  "
		}
	]
}